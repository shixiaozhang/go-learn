package services

import (
	"bbs-go/model"
	"bbs-go/repositories"
	"github.com/mlogclub/simple"
)

var CheckInService = newCheckInService()

func newCheckInService() *checkInService {
	return &checkInService {}
}

type checkInService struct {
}

func (s *checkInService) Get(id int64) *model.CheckIn {
	return repositories.CheckInRepository.Get(simple.DB(), id)
}

func (s *checkInService) Take(where ...interface{}) *model.CheckIn {
	return repositories.CheckInRepository.Take(simple.DB(), where...)
}

func (s *checkInService) Find(cnd *simple.SqlCnd) []model.CheckIn {
	return repositories.CheckInRepository.Find(simple.DB(), cnd)
}

func (s *checkInService) FindOne(cnd *simple.SqlCnd) *model.CheckIn {
	return repositories.CheckInRepository.FindOne(simple.DB(), cnd)
}

func (s *checkInService) FindPageByParams(params *simple.QueryParams) (list []model.CheckIn, paging *simple.Paging) {
	return repositories.CheckInRepository.FindPageByParams(simple.DB(), params)
}

func (s *checkInService) FindPageByCnd(cnd *simple.SqlCnd) (list []model.CheckIn, paging *simple.Paging) {
	return repositories.CheckInRepository.FindPageByCnd(simple.DB(), cnd)
}

func (s *checkInService) Count(cnd *simple.SqlCnd) int64 {
	return repositories.CheckInRepository.Count(simple.DB(), cnd)
}

func (s *checkInService) Create(t *model.CheckIn) error {
	return repositories.CheckInRepository.Create(simple.DB(), t)
}

func (s *checkInService) Update(t *model.CheckIn) error {
	return repositories.CheckInRepository.Update(simple.DB(), t)
}

func (s *checkInService) Updates(id int64, columns map[string]interface{}) error {
	return repositories.CheckInRepository.Updates(simple.DB(), id, columns)
}

func (s *checkInService) UpdateColumn(id int64, name string, value interface{}) error {
	return repositories.CheckInRepository.UpdateColumn(simple.DB(), id, name, value)
}

func (s *checkInService) Delete(id int64) {
	repositories.CheckInRepository.Delete(simple.DB(), id)
}

